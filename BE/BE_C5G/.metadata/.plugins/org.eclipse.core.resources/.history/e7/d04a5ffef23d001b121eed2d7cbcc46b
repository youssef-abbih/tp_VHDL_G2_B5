/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
#include <stdio.h>
#define freq_anemo (unsigned int *)AVALON_PWM_ANEMOMETRE_0_BASE
#define duty_anemo (unsigned int *)(AVALON_PWM_ANEMOMETRE_0_BASE+4)
#define control_anemo (unsigned int *)(AVALON_PWM_ANEMOMETRE_0_BASE+8)
#define freq_compas (unsigned int *)AVALOM_PWM_COMPAS_0_BASE
#define duty_compas (unsigned int *)(AVALOM_PWM_COMPAS_0_BASE+4)
#define control_compas (unsigned int *)(AVALOM_PWM_COMPAS_0_BASE+8)
#define config (unsigned int *)GESTION_ANEMOMETRE_0_BASE
#define code   (unsigned int *) (GESTION_ANEMOMETRE_0_BASE+4)
#define cfg (unsigned int*) GESTION_COMPAS_0_BASE
#define data_compas (unsigned int*) (GESTION_COMPAS_0_BASE + 4)
#define buttons ( unsigned int *)GESTION_BOUTTON_0_BASE
#define Code_fonction ( unsigned int *)(GESTION_BOUTTON_0_BASE +4)
volatile unsigned int Code1;

void delay(volatile long unsigned t){
    while(t--);
}
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  /******************pwm compas*****************************************/
       *freq_compas=0x1388;// pour avoir une frequence de 10k
       *duty_compas = 0x401;
       *control_compas = 0x3;
  /*************************pwm anemometre******************************/
       *freq_anemo=0x7A120;// pour avoir une frequence de 100HZ
       *duty_anemo = 0x200;
       *control_anemo = 0x3;
       *config=0x3;
       *cfg=0x3;
  int a,b;
  a = (*code) & 0xFF;
  b = (*data_compas)& 0x1FF;
  *buttons=1; //Reset to 1
  /* Event loop never exits. */
  while (1){

       printf ("la vitesse du vent: %d Km/h\n ",a);
       delay(500000);
      *duty_compas=(*duty_compas)+10;
      printf ("angle: %d° \n ",b);
       delay(1000000);

       Code1=*Code_fonction;
       if (Code1 == 0)
       printf("mode standBy 0000 \n");
       delay(1000000);
       if (Code1 == 1)
       printf("manuel Babord 0001 \n");
       delay(1000000);
       if (Code1 == 2)
       printf("manuel tribord 0010 \n");
       delay(1000000);
       if (Code1 == 3)
       printf("mode automatique 0011 \n");
       delay(1000000);
       if (Code1 == 4)
       printf("increment par 1° babord 0100 \n");
       delay(1000000);
       if (Code1 == 5)
       printf("increment par 10° babord 0101 \n");
       delay(1000000);
       if (Code1 == 6)
       printf("increment par 1° tribord 0110 \n");
       delay(1000000);
       if (Code1 == 7)
       printf("increment par 10° tribord 0111 \n");
       delay(500000);
}

  return 0;
}
