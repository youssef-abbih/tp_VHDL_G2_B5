
test_sopc.elf:     file format elf32-littlenios2
test_sopc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000470 memsz 0x00000470 flags r-x
    LOAD off    0x00001490 vaddr 0x00008490 paddr 0x00008494 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001498 vaddr 0x00008498 paddr 0x00008498 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000458  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00008478  00008478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00008490  00008494  00001490  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00008498  00008498  00001498  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  000014c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000265  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000e26  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000756  00000000  00000000  00002733  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e06  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000260  00000000  00000000  00004c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000069c  00000000  00000000  00004ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000039f  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0000592c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0000686b  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00006871  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00006875  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0000687d  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00006886  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000024  00000000  00000000  0000689f  2**0
                  CONTENTS, READONLY
 27 .jdi          000041ca  00000000  00000000  000068c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008478 l    d  .rodata	00000000 .rodata
00008490 l    d  .rwdata	00000000 .rwdata
00008498 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000080ec l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000082f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00008178 g     F .text	0000002c alt_main
00008494 g       *ABS*	00000000 __flash_rwdata_start
000081a4 g     F .text	00000038 alt_putstr
00008490 g     O .rwdata	00000004 jtag_uart
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000084a0 g     O .bss	00000004 alt_argv
00010490 g       *ABS*	00000000 _gp
000081dc g     F .text	00000004 usleep
000082cc g     F .text	00000008 altera_nios2_irq_init
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008430 g     F .text	00000008 __udivsi3
000084a8 g       *ABS*	00000000 __bss_end
000082c4 g     F .text	00000004 alt_dcache_flush_all
00008494 g       *ABS*	00000000 __ram_rwdata_end
00008490 g       *ABS*	00000000 __ram_rodata_end
00008438 g     F .text	00000008 __umodsi3
000084a8 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008204 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000081e0 g     F .text	00000004 alt_sys_init
00008440 g     F .text	00000038 __mulsi3
00008490 g       *ABS*	00000000 __ram_rwdata_start
00008478 g       *ABS*	00000000 __ram_rodata_start
00008238 g     F .text	0000008c alt_busy_sleep
000084a8 g       *ABS*	00000000 __alt_stack_base
00008498 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000090 main
000084a4 g     O .bss	00000004 alt_envp
00008370 g     F .text	00000060 __divsi3
00008478 g       *ABS*	00000000 __flash_rodata_start
000081e4 g     F .text	00000020 alt_irq_init
0000849c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008494 g       *ABS*	00000000 _edata
000084a8 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
00008498 g     O .bss	00000001 a
000083d0 g     F .text	00000060 __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000082d4 g     F .text	00000020 strlen
000082c8 g     F .text	00000004 alt_icache_flush_all
0000810c g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6812414 	ori	gp,gp,1168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a12614 	ori	r2,r2,33944

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e12a14 	ori	r3,r3,33960

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000810c0 	call	810c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081780 	call	8178 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#define control (unsigned int *)(AVALON_PWM_0_BASE +8)
#define boutons (unsigned int *)KEYS_BASE
#define leds (unsigned int *)LEDS_BASE
unsigned char a;
int main()
{ 
    805c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21211e04 	addi	r4,r4,-31624
#define control (unsigned int *)(AVALON_PWM_0_BASE +8)
#define boutons (unsigned int *)KEYS_BASE
#define leds (unsigned int *)LEDS_BASE
unsigned char a;
int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081a40 	call	81a4 <alt_putstr>
       *freq=0x1388;// pour avoir une frequence de 10k
    8070:	00c4e204 	movi	r3,5000
    8074:	00800074 	movhi	r2,1
    8078:	10840804 	addi	r2,r2,4128
    807c:	10c00015 	stw	r3,0(r2)
       *duty = 0x10; // RC = 50%
    8080:	00c00404 	movi	r3,16
    8084:	10800104 	addi	r2,r2,4
    8088:	10c00015 	stw	r3,0(r2)
       *control = 0x3;
    808c:	00c000c4 	movi	r3,3
    8090:	10800104 	addi	r2,r2,4
    8094:	10c00015 	stw	r3,0(r2)
  /* Event loop never exits. */
  while (1){
	  a=(*boutons) & 3;
    8098:	00800074 	movhi	r2,1
    809c:	10840004 	addi	r2,r2,4096
    80a0:	10800017 	ldw	r2,0(r2)
	  switch(a){
    80a4:	01000044 	movi	r4,1
       *freq=0x1388;// pour avoir une frequence de 10k
       *duty = 0x10; // RC = 50%
       *control = 0x3;
  /* Event loop never exits. */
  while (1){
	  a=(*boutons) & 3;
    80a8:	108000cc 	andi	r2,r2,3
	  switch(a){
    80ac:	1007883a 	mov	r3,r2
       *freq=0x1388;// pour avoir une frequence de 10k
       *duty = 0x10; // RC = 50%
       *control = 0x3;
  /* Event loop never exits. */
  while (1){
	  a=(*boutons) & 3;
    80b0:	d0a00205 	stb	r2,-32760(gp)
	  switch(a){
    80b4:	11000926 	beq	r2,r4,80dc <main+0x80>
    80b8:	11000836 	bltu	r2,r4,80dc <main+0x80>
    80bc:	00800084 	movi	r2,2
    80c0:	18bff526 	beq	r3,r2,8098 <main+0x3c>
    80c4:	008000c4 	movi	r2,3
    80c8:	1880041e 	bne	r3,r2,80dc <main+0x80>
	  case 0 :*leds=0;break;
	  case 1 :*leds=0;break;
	  case 2 :break;
	  case 3 :*leds-*leds+1;
	          usleep(1000000);
    80cc:	010003f4 	movhi	r4,15
    80d0:	21109004 	addi	r4,r4,16960
    80d4:	00081dc0 	call	81dc <usleep>
    80d8:	003fef06 	br	8098 <main+0x3c>
	          break;
	  default :*leds=0;break;
    80dc:	00800074 	movhi	r2,1
    80e0:	10840404 	addi	r2,r2,4112
    80e4:	10000015 	stw	zero,0(r2)
    80e8:	003feb06 	br	8098 <main+0x3c>

000080ec <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80ec:	2900051e 	bne	r5,r4,8104 <alt_load_section+0x18>
    80f0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    80f4:	20800017 	ldw	r2,0(r4)
    80f8:	21000104 	addi	r4,r4,4
    80fc:	28800015 	stw	r2,0(r5)
    8100:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8104:	29bffb1e 	bne	r5,r6,80f4 <alt_load_section+0x8>
    8108:	f800283a 	ret

0000810c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    810c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8110:	01000074 	movhi	r4,1
    8114:	21212504 	addi	r4,r4,-31596
    8118:	01400074 	movhi	r5,1
    811c:	29612404 	addi	r5,r5,-31600
    8120:	01800074 	movhi	r6,1
    8124:	31a12504 	addi	r6,r6,-31596
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8128:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    812c:	00080ec0 	call	80ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8130:	01000074 	movhi	r4,1
    8134:	21200804 	addi	r4,r4,-32736
    8138:	01400074 	movhi	r5,1
    813c:	29600804 	addi	r5,r5,-32736
    8140:	01800074 	movhi	r6,1
    8144:	31a00804 	addi	r6,r6,-32736
    8148:	00080ec0 	call	80ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    814c:	01000074 	movhi	r4,1
    8150:	21211e04 	addi	r4,r4,-31624
    8154:	01400074 	movhi	r5,1
    8158:	29611e04 	addi	r5,r5,-31624
    815c:	01800074 	movhi	r6,1
    8160:	31a12404 	addi	r6,r6,-31600
    8164:	00080ec0 	call	80ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8168:	00082c40 	call	82c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    816c:	dfc00017 	ldw	ra,0(sp)
    8170:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8174:	00082c81 	jmpi	82c8 <alt_icache_flush_all>

00008178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8178:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    817c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8180:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8184:	00081e40 	call	81e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8188:	00081e00 	call	81e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    818c:	d1200317 	ldw	r4,-32756(gp)
    8190:	d1600417 	ldw	r5,-32752(gp)
    8194:	d1a00517 	ldw	r6,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8198:	dfc00017 	ldw	ra,0(sp)
    819c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81a0:	000805c1 	jmpi	805c <main>

000081a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81a4:	defffe04 	addi	sp,sp,-8
    81a8:	dc000015 	stw	r16,0(sp)
    81ac:	dfc00115 	stw	ra,4(sp)
    81b0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81b4:	00082d40 	call	82d4 <strlen>
    81b8:	800b883a 	mov	r5,r16
    81bc:	100d883a 	mov	r6,r2
    81c0:	01000074 	movhi	r4,1
    81c4:	21212404 	addi	r4,r4,-31600
    81c8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    81cc:	dfc00117 	ldw	ra,4(sp)
    81d0:	dc000017 	ldw	r16,0(sp)
    81d4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81d8:	00082041 	jmpi	8204 <altera_avalon_jtag_uart_write>

000081dc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    81dc:	00082381 	jmpi	8238 <alt_busy_sleep>

000081e0 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_INIT ( SYSID_0, sysid_0);
}
    81e0:	f800283a 	ret

000081e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81e4:	deffff04 	addi	sp,sp,-4
    81e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    81ec:	00082cc0 	call	82cc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81f0:	00800044 	movi	r2,1
    81f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81f8:	dfc00017 	ldw	ra,0(sp)
    81fc:	dec00104 	addi	sp,sp,4
    8200:	f800283a 	ret

00008204 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8204:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    8208:	298f883a 	add	r7,r5,r6
    820c:	20c00104 	addi	r3,r4,4
    8210:	00000606 	br	822c <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8214:	18800037 	ldwio	r2,0(r3)
    8218:	10bfffec 	andhi	r2,r2,65535
    821c:	10000326 	beq	r2,zero,822c <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8220:	28800007 	ldb	r2,0(r5)
    8224:	29400044 	addi	r5,r5,1
    8228:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    822c:	29fff936 	bltu	r5,r7,8214 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8230:	3005883a 	mov	r2,r6
    8234:	f800283a 	ret

00008238 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8238:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    823c:	014666b4 	movhi	r5,6554
    8240:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8244:	dc000015 	stw	r16,0(sp)
    8248:	dfc00115 	stw	ra,4(sp)
    824c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8250:	00084300 	call	8430 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8254:	10001126 	beq	r2,zero,829c <alt_busy_sleep+0x64>
    8258:	0007883a 	mov	r3,zero
    825c:	01200034 	movhi	r4,32768
    8260:	213fffc4 	addi	r4,r4,-1
    8264:	017999b4 	movhi	r5,58982
    8268:	295999c4 	addi	r5,r5,26215
    826c:	00000406 	br	8280 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8270:	213fffc4 	addi	r4,r4,-1
    8274:	203ffe1e 	bne	r4,zero,8270 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8278:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    827c:	18c00044 	addi	r3,r3,1
    8280:	18bffb16 	blt	r3,r2,8270 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8284:	8009883a 	mov	r4,r16
    8288:	01400144 	movi	r5,5
    828c:	00084400 	call	8440 <__mulsi3>
    8290:	10bfffc4 	addi	r2,r2,-1
    8294:	103ffe1e 	bne	r2,zero,8290 <alt_busy_sleep+0x58>
    8298:	00000506 	br	82b0 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    829c:	8009883a 	mov	r4,r16
    82a0:	01400144 	movi	r5,5
    82a4:	00084400 	call	8440 <__mulsi3>
    82a8:	10bfffc4 	addi	r2,r2,-1
    82ac:	00bffe16 	blt	zero,r2,82a8 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    82b0:	0005883a 	mov	r2,zero
    82b4:	dfc00117 	ldw	ra,4(sp)
    82b8:	dc000017 	ldw	r16,0(sp)
    82bc:	dec00204 	addi	sp,sp,8
    82c0:	f800283a 	ret

000082c4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    82c4:	f800283a 	ret

000082c8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    82c8:	f800283a 	ret

000082cc <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    82cc:	000170fa 	wrctl	ienable,zero
}
    82d0:	f800283a 	ret

000082d4 <strlen>:
    82d4:	20800007 	ldb	r2,0(r4)
    82d8:	10000526 	beq	r2,zero,82f0 <strlen+0x1c>
    82dc:	2007883a 	mov	r3,r4
    82e0:	18c00044 	addi	r3,r3,1
    82e4:	18800007 	ldb	r2,0(r3)
    82e8:	103ffd1e 	bne	r2,zero,82e0 <strlen+0xc>
    82ec:	1905c83a 	sub	r2,r3,r4
    82f0:	f800283a 	ret

000082f4 <udivmodsi4>:
    82f4:	29001b2e 	bgeu	r5,r4,8364 <udivmodsi4+0x70>
    82f8:	28001a16 	blt	r5,zero,8364 <udivmodsi4+0x70>
    82fc:	00800044 	movi	r2,1
    8300:	0007883a 	mov	r3,zero
    8304:	01c007c4 	movi	r7,31
    8308:	00000306 	br	8318 <udivmodsi4+0x24>
    830c:	19c01326 	beq	r3,r7,835c <udivmodsi4+0x68>
    8310:	18c00044 	addi	r3,r3,1
    8314:	28000416 	blt	r5,zero,8328 <udivmodsi4+0x34>
    8318:	294b883a 	add	r5,r5,r5
    831c:	1085883a 	add	r2,r2,r2
    8320:	293ffa36 	bltu	r5,r4,830c <udivmodsi4+0x18>
    8324:	10000d26 	beq	r2,zero,835c <udivmodsi4+0x68>
    8328:	0007883a 	mov	r3,zero
    832c:	21400236 	bltu	r4,r5,8338 <udivmodsi4+0x44>
    8330:	2149c83a 	sub	r4,r4,r5
    8334:	1886b03a 	or	r3,r3,r2
    8338:	1004d07a 	srli	r2,r2,1
    833c:	280ad07a 	srli	r5,r5,1
    8340:	103ffa1e 	bne	r2,zero,832c <udivmodsi4+0x38>
    8344:	30000226 	beq	r6,zero,8350 <udivmodsi4+0x5c>
    8348:	2005883a 	mov	r2,r4
    834c:	f800283a 	ret
    8350:	1809883a 	mov	r4,r3
    8354:	2005883a 	mov	r2,r4
    8358:	f800283a 	ret
    835c:	0007883a 	mov	r3,zero
    8360:	003ff806 	br	8344 <udivmodsi4+0x50>
    8364:	00800044 	movi	r2,1
    8368:	0007883a 	mov	r3,zero
    836c:	003fef06 	br	832c <udivmodsi4+0x38>

00008370 <__divsi3>:
    8370:	defffe04 	addi	sp,sp,-8
    8374:	dc000015 	stw	r16,0(sp)
    8378:	dfc00115 	stw	ra,4(sp)
    837c:	0021883a 	mov	r16,zero
    8380:	20000c16 	blt	r4,zero,83b4 <__divsi3+0x44>
    8384:	000d883a 	mov	r6,zero
    8388:	28000e16 	blt	r5,zero,83c4 <__divsi3+0x54>
    838c:	00082f40 	call	82f4 <udivmodsi4>
    8390:	1007883a 	mov	r3,r2
    8394:	8005003a 	cmpeq	r2,r16,zero
    8398:	1000011e 	bne	r2,zero,83a0 <__divsi3+0x30>
    839c:	00c7c83a 	sub	r3,zero,r3
    83a0:	1805883a 	mov	r2,r3
    83a4:	dfc00117 	ldw	ra,4(sp)
    83a8:	dc000017 	ldw	r16,0(sp)
    83ac:	dec00204 	addi	sp,sp,8
    83b0:	f800283a 	ret
    83b4:	0109c83a 	sub	r4,zero,r4
    83b8:	04000044 	movi	r16,1
    83bc:	000d883a 	mov	r6,zero
    83c0:	283ff20e 	bge	r5,zero,838c <__divsi3+0x1c>
    83c4:	014bc83a 	sub	r5,zero,r5
    83c8:	8021003a 	cmpeq	r16,r16,zero
    83cc:	003fef06 	br	838c <__divsi3+0x1c>

000083d0 <__modsi3>:
    83d0:	deffff04 	addi	sp,sp,-4
    83d4:	dfc00015 	stw	ra,0(sp)
    83d8:	01800044 	movi	r6,1
    83dc:	2807883a 	mov	r3,r5
    83e0:	20000416 	blt	r4,zero,83f4 <__modsi3+0x24>
    83e4:	28000c16 	blt	r5,zero,8418 <__modsi3+0x48>
    83e8:	dfc00017 	ldw	ra,0(sp)
    83ec:	dec00104 	addi	sp,sp,4
    83f0:	00082f41 	jmpi	82f4 <udivmodsi4>
    83f4:	0109c83a 	sub	r4,zero,r4
    83f8:	28000b16 	blt	r5,zero,8428 <__modsi3+0x58>
    83fc:	180b883a 	mov	r5,r3
    8400:	01800044 	movi	r6,1
    8404:	00082f40 	call	82f4 <udivmodsi4>
    8408:	0085c83a 	sub	r2,zero,r2
    840c:	dfc00017 	ldw	ra,0(sp)
    8410:	dec00104 	addi	sp,sp,4
    8414:	f800283a 	ret
    8418:	014bc83a 	sub	r5,zero,r5
    841c:	dfc00017 	ldw	ra,0(sp)
    8420:	dec00104 	addi	sp,sp,4
    8424:	00082f41 	jmpi	82f4 <udivmodsi4>
    8428:	0147c83a 	sub	r3,zero,r5
    842c:	003ff306 	br	83fc <__modsi3+0x2c>

00008430 <__udivsi3>:
    8430:	000d883a 	mov	r6,zero
    8434:	00082f41 	jmpi	82f4 <udivmodsi4>

00008438 <__umodsi3>:
    8438:	01800044 	movi	r6,1
    843c:	00082f41 	jmpi	82f4 <udivmodsi4>

00008440 <__mulsi3>:
    8440:	20000a26 	beq	r4,zero,846c <__mulsi3+0x2c>
    8444:	0007883a 	mov	r3,zero
    8448:	2080004c 	andi	r2,r4,1
    844c:	1005003a 	cmpeq	r2,r2,zero
    8450:	2008d07a 	srli	r4,r4,1
    8454:	1000011e 	bne	r2,zero,845c <__mulsi3+0x1c>
    8458:	1947883a 	add	r3,r3,r5
    845c:	294b883a 	add	r5,r5,r5
    8460:	203ff91e 	bne	r4,zero,8448 <__mulsi3+0x8>
    8464:	1805883a 	mov	r2,r3
    8468:	f800283a 	ret
    846c:	0007883a 	mov	r3,zero
    8470:	1805883a 	mov	r2,r3
    8474:	f800283a 	ret
